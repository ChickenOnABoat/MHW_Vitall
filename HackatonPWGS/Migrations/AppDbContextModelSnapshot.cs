// <auto-generated />
using System;
using HackatonPWGS.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HackatonPWGS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HackatonPWGS.Models.Entity.Relationship.acompanhante_local_atendimento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("acompanhanteid")
                        .HasColumnType("int");

                    b.Property<int>("id_acompanhante")
                        .HasColumnType("int");

                    b.Property<int>("id_local_atendimento")
                        .HasColumnType("int");

                    b.Property<int?>("local_atendimentoid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("acompanhanteid");

                    b.HasIndex("local_atendimentoid");

                    b.ToTable("acompanhante_local_atendimento");

                    b.HasData(
                        new
                        {
                            id = 1,
                            id_acompanhante = 1,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 2,
                            id_acompanhante = 1,
                            id_local_atendimento = 2
                        },
                        new
                        {
                            id = 3,
                            id_acompanhante = 1,
                            id_local_atendimento = 3
                        },
                        new
                        {
                            id = 4,
                            id_acompanhante = 1,
                            id_local_atendimento = 4
                        },
                        new
                        {
                            id = 5,
                            id_acompanhante = 1,
                            id_local_atendimento = 5
                        },
                        new
                        {
                            id = 6,
                            id_acompanhante = 1,
                            id_local_atendimento = 6
                        },
                        new
                        {
                            id = 7,
                            id_acompanhante = 1,
                            id_local_atendimento = 7
                        },
                        new
                        {
                            id = 8,
                            id_acompanhante = 2,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 9,
                            id_acompanhante = 2,
                            id_local_atendimento = 2
                        },
                        new
                        {
                            id = 10,
                            id_acompanhante = 2,
                            id_local_atendimento = 3
                        },
                        new
                        {
                            id = 11,
                            id_acompanhante = 2,
                            id_local_atendimento = 4
                        },
                        new
                        {
                            id = 12,
                            id_acompanhante = 2,
                            id_local_atendimento = 5
                        },
                        new
                        {
                            id = 13,
                            id_acompanhante = 2,
                            id_local_atendimento = 6
                        },
                        new
                        {
                            id = 14,
                            id_acompanhante = 2,
                            id_local_atendimento = 7
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.Relationship.medico_clinica", b =>
                {
                    b.Property<int>("id_medico")
                        .HasColumnType("int");

                    b.Property<int>("id_clinica")
                        .HasColumnType("int");

                    b.HasKey("id_medico", "id_clinica");

                    b.HasIndex("id_clinica");

                    b.ToTable("medico_clinica");

                    b.HasData(
                        new
                        {
                            id_medico = 1,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 2,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 3,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 4,
                            id_clinica = 5
                        },
                        new
                        {
                            id_medico = 5,
                            id_clinica = 5
                        },
                        new
                        {
                            id_medico = 6,
                            id_clinica = 5
                        },
                        new
                        {
                            id_medico = 7,
                            id_clinica = 5
                        },
                        new
                        {
                            id_medico = 8,
                            id_clinica = 2
                        },
                        new
                        {
                            id_medico = 9,
                            id_clinica = 2
                        },
                        new
                        {
                            id_medico = 10,
                            id_clinica = 2
                        },
                        new
                        {
                            id_medico = 11,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 12,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 13,
                            id_clinica = 2
                        },
                        new
                        {
                            id_medico = 14,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 15,
                            id_clinica = 2
                        },
                        new
                        {
                            id_medico = 16,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 17,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 18,
                            id_clinica = 2
                        },
                        new
                        {
                            id_medico = 19,
                            id_clinica = 1
                        },
                        new
                        {
                            id_medico = 20,
                            id_clinica = 2
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.Relationship.medico_especialidade", b =>
                {
                    b.Property<int>("id_medico")
                        .HasColumnType("int");

                    b.Property<int>("id_especialidade")
                        .HasColumnType("int");

                    b.HasKey("id_medico", "id_especialidade");

                    b.HasIndex("id_especialidade");

                    b.ToTable("medico_especialidade");

                    b.HasData(
                        new
                        {
                            id_medico = 1,
                            id_especialidade = 1
                        },
                        new
                        {
                            id_medico = 2,
                            id_especialidade = 2
                        },
                        new
                        {
                            id_medico = 3,
                            id_especialidade = 3
                        },
                        new
                        {
                            id_medico = 4,
                            id_especialidade = 4
                        },
                        new
                        {
                            id_medico = 5,
                            id_especialidade = 5
                        },
                        new
                        {
                            id_medico = 6,
                            id_especialidade = 5
                        },
                        new
                        {
                            id_medico = 7,
                            id_especialidade = 5
                        },
                        new
                        {
                            id_medico = 8,
                            id_especialidade = 16
                        },
                        new
                        {
                            id_medico = 9,
                            id_especialidade = 17
                        },
                        new
                        {
                            id_medico = 10,
                            id_especialidade = 18
                        },
                        new
                        {
                            id_medico = 11,
                            id_especialidade = 19
                        },
                        new
                        {
                            id_medico = 12,
                            id_especialidade = 22
                        },
                        new
                        {
                            id_medico = 13,
                            id_especialidade = 23
                        },
                        new
                        {
                            id_medico = 14,
                            id_especialidade = 24
                        },
                        new
                        {
                            id_medico = 15,
                            id_especialidade = 25
                        },
                        new
                        {
                            id_medico = 16,
                            id_especialidade = 27
                        },
                        new
                        {
                            id_medico = 17,
                            id_especialidade = 27
                        },
                        new
                        {
                            id_medico = 18,
                            id_especialidade = 40
                        },
                        new
                        {
                            id_medico = 19,
                            id_especialidade = 42
                        },
                        new
                        {
                            id_medico = 20,
                            id_especialidade = 43
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.Relationship.medico_habilidade", b =>
                {
                    b.Property<int>("id_medico")
                        .HasColumnType("int");

                    b.Property<int>("id_habilidade")
                        .HasColumnType("int");

                    b.HasKey("id_medico", "id_habilidade");

                    b.HasIndex("id_habilidade");

                    b.ToTable("medico_habilidade");

                    b.HasData(
                        new
                        {
                            id_medico = 1,
                            id_habilidade = 1
                        },
                        new
                        {
                            id_medico = 6,
                            id_habilidade = 1
                        },
                        new
                        {
                            id_medico = 16,
                            id_habilidade = 1
                        },
                        new
                        {
                            id_medico = 9,
                            id_habilidade = 1
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.acompanhante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descricao_acompanhante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email_acompanhante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("id_agenda_acompanhante")
                        .HasColumnType("int");

                    b.Property<string>("nome_acompanhante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("numero_contato_acompanhante")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("acompanhante");

                    b.HasData(
                        new
                        {
                            id = 1,
                            descricao_acompanhante = "Meu objetivo é garantir uma boa experiência e comunicação em seu compromisso. Me comunico em Libras e Português",
                            email_acompanhante = "acom1@gmail.com",
                            nome_acompanhante = "Junior Silva",
                            numero_contato_acompanhante = 11984574122L
                        },
                        new
                        {
                            id = 2,
                            descricao_acompanhante = "Me comunico em Libras e Português, e estou disposta a ajudar",
                            email_acompanhante = "acom2@gmail.com",
                            nome_acompanhante = "Maria Azevedo",
                            numero_contato_acompanhante = 11984574232L
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.agenda_acompanhante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("id_acompanhante")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_acompanhante")
                        .IsUnique();

                    b.ToTable("agenda_acompanhante");

                    b.HasData(
                        new
                        {
                            id = 1,
                            id_acompanhante = 1
                        },
                        new
                        {
                            id = 2,
                            id_acompanhante = 2
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.agenda_medico", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("duracao_compromisso_minutos")
                        .HasColumnType("int");

                    b.Property<int>("duracao_intervalo_minutos")
                        .HasColumnType("int");

                    b.Property<int>("id_medico")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_medico")
                        .IsUnique();

                    b.ToTable("agenda_medico");

                    b.HasData(
                        new
                        {
                            id = 1,
                            duracao_compromisso_minutos = 30,
                            duracao_intervalo_minutos = 0,
                            id_medico = 1
                        },
                        new
                        {
                            id = 2,
                            duracao_compromisso_minutos = 30,
                            duracao_intervalo_minutos = 0,
                            id_medico = 6
                        },
                        new
                        {
                            id = 3,
                            duracao_compromisso_minutos = 60,
                            duracao_intervalo_minutos = 0,
                            id_medico = 16
                        },
                        new
                        {
                            id = 4,
                            duracao_compromisso_minutos = 30,
                            duracao_intervalo_minutos = 0,
                            id_medico = 9
                        },
                        new
                        {
                            id = 5,
                            duracao_compromisso_minutos = 30,
                            duracao_intervalo_minutos = 0,
                            id_medico = 2
                        },
                        new
                        {
                            id = 6,
                            duracao_compromisso_minutos = 30,
                            duracao_intervalo_minutos = 0,
                            id_medico = 3
                        },
                        new
                        {
                            id = 7,
                            duracao_compromisso_minutos = 30,
                            duracao_intervalo_minutos = 0,
                            id_medico = 7
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.agendamento_acompanhante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dt_hr_inicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dt_ht_fim")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_agenda_acompanhante")
                        .HasColumnType("int");

                    b.Property<int?>("id_paciente")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_agenda_acompanhante");

                    b.HasIndex("id_paciente");

                    b.ToTable("agendamento_acompanhante");
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.agendamento_medico", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dt_hr_inicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dt_ht_fim")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_agenda_medico")
                        .HasColumnType("int");

                    b.Property<int?>("id_paciente")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_agenda_medico");

                    b.HasIndex("id_paciente");

                    b.ToTable("agendamento_medico");
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.clinica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("cnpj_clinica")
                        .HasColumnType("bigint");

                    b.Property<int>("contato_clinica_1")
                        .HasColumnType("int");

                    b.Property<int?>("id_local_atendimento_clinica")
                        .HasColumnType("int");

                    b.Property<string>("nome_clinica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id_local_atendimento_clinica");

                    b.ToTable("clinica");

                    b.HasData(
                        new
                        {
                            id = 1,
                            cnpj_clinica = 16113226641238L,
                            contato_clinica_1 = 1126610000,
                            id_local_atendimento_clinica = 1,
                            nome_clinica = "Hospital das Clínicas"
                        },
                        new
                        {
                            id = 2,
                            cnpj_clinica = 81062960693153L,
                            contato_clinica_1 = 1126618500,
                            id_local_atendimento_clinica = 2,
                            nome_clinica = "Instituto da Criança"
                        },
                        new
                        {
                            id = 3,
                            cnpj_clinica = 13960332820863L,
                            contato_clinica_1 = 1126610000,
                            id_local_atendimento_clinica = 3,
                            nome_clinica = "Instituto de Ortopedia"
                        },
                        new
                        {
                            id = 4,
                            cnpj_clinica = 23796582895229L,
                            contato_clinica_1 = 1126610000,
                            id_local_atendimento_clinica = 4,
                            nome_clinica = "Instituto de Psiquiatria"
                        },
                        new
                        {
                            id = 5,
                            cnpj_clinica = 50480326293878L,
                            contato_clinica_1 = 1126615000,
                            id_local_atendimento_clinica = 5,
                            nome_clinica = "Instituto do Coração"
                        },
                        new
                        {
                            id = 6,
                            cnpj_clinica = 40851431805829L,
                            contato_clinica_1 = 1130617524,
                            id_local_atendimento_clinica = 6,
                            nome_clinica = "Escola de Enfermagem"
                        },
                        new
                        {
                            id = 7,
                            cnpj_clinica = 43290432437169L,
                            contato_clinica_1 = 1130617011,
                            id_local_atendimento_clinica = 7,
                            nome_clinica = "Instituto de Medicina Tropical"
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.dia_semana", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nome_dia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("dia_semana");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nome_dia = "Domingo"
                        },
                        new
                        {
                            id = 2,
                            nome_dia = "Segunda"
                        },
                        new
                        {
                            id = 3,
                            nome_dia = "Terça"
                        },
                        new
                        {
                            id = 4,
                            nome_dia = "Quarta"
                        },
                        new
                        {
                            id = 5,
                            nome_dia = "Quinta"
                        },
                        new
                        {
                            id = 6,
                            nome_dia = "Sexta"
                        },
                        new
                        {
                            id = 7,
                            nome_dia = "Sábado"
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.especialidade_medica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descricao_especialidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nome_especialidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("especialidade_medica");

                    b.HasData(
                        new
                        {
                            id = 1,
                            descricao_especialidade = "diagnóstico e tratamento das doenças alérgicas e do sistema imunológico.",
                            nome_especialidade = "Alergia e Imunologia"
                        },
                        new
                        {
                            id = 2,
                            descricao_especialidade = "área da Medicina que envolve o tratamento da dor, a hipnose e o manejo intensivo do paciente sob intervenção cirúrgica ou procedimentos.",
                            nome_especialidade = "Anestesiologia"
                        },
                        new
                        {
                            id = 3,
                            descricao_especialidade = "é a área da medicina que estuda o tratamento das doenças do aparelho circulatório.",
                            nome_especialidade = "Angiologia"
                        },
                        new
                        {
                            id = 4,
                            descricao_especialidade = "é a especialidade que trata dos tumores malignos ou câncer.",
                            nome_especialidade = "Cancerologia (oncologia)"
                        },
                        new
                        {
                            id = 5,
                            descricao_especialidade = "aborda as doenças relacionadas com o coração e sistema vascular.",
                            nome_especialidade = "Cardiologia"
                        },
                        new
                        {
                            id = 15,
                            descricao_especialidade = "é a área que engloba todas as áreas não cirúrgicas, sendo subdividida em várias outras especialidades.",
                            nome_especialidade = "Clínica Médica (Medicina interna) "
                        },
                        new
                        {
                            id = 16,
                            descricao_especialidade = "é a parte da medicina que estuda e trata os problemas do intestino grosso (cólon), sigmoide e doenças do reto, canal anal e ânus.",
                            nome_especialidade = "Coloproctologia"
                        },
                        new
                        {
                            id = 17,
                            descricao_especialidade = "é o estudo da pele anexos (pelos, glândulas), tratamento e prevenção das doenças.",
                            nome_especialidade = "Dermatologia"
                        },
                        new
                        {
                            id = 18,
                            descricao_especialidade = "é a área da Medicina responsável pelo cuidados aos hormônios, crescimento e glândulas como adrenal, tireoide, hipófise, pâncreas endócrino e outros.",
                            nome_especialidade = "Endocrinologia e Metabologia"
                        },
                        new
                        {
                            id = 19,
                            descricao_especialidade = "Esta especialidade médica ocupa-se do estudo dos mecanismo fisiopatológicos, diagnóstico e tratamento de enfermidades passíveis de abordagem por procedimentos endoscópicos e minimamente invasivos.",
                            nome_especialidade = "Endoscopia"
                        },
                        new
                        {
                            id = 20,
                            descricao_especialidade = "é o estudo, diagnóstico, tratamento e prevenção de doenças relacionadas ao aparelho digestivo, desde erros inatos do metabolismo, doença do trato gastrointestinal, doenças do fígado e cânceres.",
                            nome_especialidade = "Gastroenterologia"
                        },
                        new
                        {
                            id = 21,
                            descricao_especialidade = "é a área da responsável pelo estudo das doenças genéticas humanas e aconselhamento genético.",
                            nome_especialidade = "Genética médica"
                        },
                        new
                        {
                            id = 22,
                            descricao_especialidade = "é a subespecialidade médica que cuida dos idosos e articula seu tratamento com outras especialidades.",
                            nome_especialidade = "Geriatria"
                        },
                        new
                        {
                            id = 23,
                            descricao_especialidade = "é a especialidade médica que aborda de forma integral a mulher. Trata desde as doenças infecciosas sexuais, gestação, alterações hormonais, reprodução.",
                            nome_especialidade = "Ginecologia e obstetrícia"
                        },
                        new
                        {
                            id = 24,
                            descricao_especialidade = "é o estudo dos elementos figurados do sangue (hemácias, leucócitos, plaquetas) e da produção desses elementos nos órgãos hematopoiéticos (medula óssea, baço, linfonódos), além de tratar das anemias, linfomas, leucemias e outros cânceres, hemofilia e doenças da coagulação",
                            nome_especialidade = "Hematologia e Hemoterapia"
                        },
                        new
                        {
                            id = 25,
                            descricao_especialidade = "é a prática médica pseudocientífica baseada na Lei dos Semelhantes. Esta é, por sua vez, uma pseudociência em consenso pela comunidade científica, já que apresenta provas científicas da sua não-eficácia.       ",
                            nome_especialidade = "Homeopatia"
                        },
                        new
                        {
                            id = 26,
                            descricao_especialidade = "prevenção, diagnóstico e tratamentos de infecções causadas por vírus, bactérias, fungos e parasitas (helmintologia, protozoologia, entomologia e artropodologia).",
                            nome_especialidade = "Infectologia"
                        },
                        new
                        {
                            id = 27,
                            descricao_especialidade = "subespecialidade que trata da mama, suas doenças, alterações benignas e estéticas.",
                            nome_especialidade = "Mastologia"
                        },
                        new
                        {
                            id = 28,
                            descricao_especialidade = "é a área da medicina que trata do indivíduo em seu ambiente familiar e comunitário, com foco na prevenção e tratamento das doenças mais comuns, sendo o articulador do encaminhamento aos especialistas quando necessária abordagem mais aprofundada das doenças.",
                            nome_especialidade = "Medicina de Família e Comunidade"
                        },
                        new
                        {
                            id = 29,
                            descricao_especialidade = "especialidade que atua no cuidado de pacientes com doenças ou lesões que requerem atenção médica imediata, atuando nas Emergências, pronto-atendimentos e serviços pré-hospitalares.",
                            nome_especialidade = "Medicina de Emergência"
                        },
                        new
                        {
                            id = 30,
                            descricao_especialidade = "trata do processo de trabalho e da relação deste com as doenças. Atua desde a prevenção dos agravos, a minimização dos efeitos destes e do tratamento das doenças do trabalho quando já estabelecidas.",
                            nome_especialidade = "Medicina do Trabalho"
                        },
                        new
                        {
                            id = 31,
                            descricao_especialidade = "manutenção da saúde no indivíduo que se desloca, qualquer que seja o meio, cuidando das interações deste deslocamento com o indivíduo.",
                            nome_especialidade = "Medicina do Tráfego"
                        },
                        new
                        {
                            id = 32,
                            descricao_especialidade = "abordagem do atleta de uma forma global, desde a fisiologia do exercício à prevenção de lesões, passando pelo controle de treino e resolução de problemas de saúde que envolvam o praticante do exercício físico.",
                            nome_especialidade = "Medicina Esportiva"
                        },
                        new
                        {
                            id = 33,
                            descricao_especialidade = "diagnóstico e terapêutica de diferentes entidades tais como doenças traumáticas, do sistema nervoso central e periférico, orto-traumatológica, cardiorrespiratória.",
                            nome_especialidade = "Medicina Física e Reabilitação"
                        },
                        new
                        {
                            id = 34,
                            descricao_especialidade = "é o ramo da medicina que se ocupa dos cuidados dos doentes graves ou instáveis, que emprega maior número de recursos tecnológicos e humanos no tratamento de doenças ou complicações de doenças, congregando conhecimento da maioria das especialidades médicas e outras áreas de saúde.",
                            nome_especialidade = "Medicina Intensiva"
                        },
                        new
                        {
                            id = 36,
                            descricao_especialidade = "é o estudo imaginológico ou terapia pelo uso de radiofármacos.",
                            nome_especialidade = "Medicina Nuclear"
                        },
                        new
                        {
                            id = 38,
                            descricao_especialidade = "é a parte da medicina que estuda e trata clinicamente as doenças do rim, como insuficiência renal.",
                            nome_especialidade = "Nefrologia"
                        },
                        new
                        {
                            id = 39,
                            descricao_especialidade = "atua no tratamento de doenças do sistema nervoso central e periférico passíveis de abordagem cirúrgica.",
                            nome_especialidade = "Neurocirurgia"
                        },
                        new
                        {
                            id = 40,
                            descricao_especialidade = "é a parte da medicina que estuda e trata o sistema nervoso.",
                            nome_especialidade = "Neurologia"
                        },
                        new
                        {
                            id = 41,
                            descricao_especialidade = "diagnóstico, prevenção e tratamento de doenças do comportamento alimentar.",
                            nome_especialidade = "Nutrologia"
                        },
                        new
                        {
                            id = 42,
                            descricao_especialidade = "é a área da medicina atrelada à Ginecologia que cuida das mulheres em relação ao processo da gestação (pré, pós-parto, puerpério, gestação e outros).",
                            nome_especialidade = "Obstetrícia"
                        },
                        new
                        {
                            id = 43,
                            descricao_especialidade = "é a parte da medicina que estuda e trata os distúrbios dos olhos.",
                            nome_especialidade = "Oftalmologia"
                        },
                        new
                        {
                            id = 44,
                            descricao_especialidade = "é a parte da medicina que estuda e trata as doenças do sistema osteomuscular, locomoção, crescimento, deformidades e as fraturas.",
                            nome_especialidade = "Ortopedia e Traumatologia"
                        },
                        new
                        {
                            id = 45,
                            descricao_especialidade = "é a parte da medicina que estuda e trata as doenças da orelha, nariz, seios paranasais, faringe e laringe.",
                            nome_especialidade = "Otorrinolaringologia"
                        },
                        new
                        {
                            id = 46,
                            descricao_especialidade = "(também anatomia patológica ou patologia cirúrgica) é a especialidade que se ocupa da análise macroscópica, microscópica e molecular das doenças em autópsias, espécimes cirúrgicos, biópsias e preparados citológicos. Ela faz a ligação entre a ciência básica e a prática clínica.",
                            nome_especialidade = "Patologia"
                        },
                        new
                        {
                            id = 47,
                            descricao_especialidade = "No Brasil, de forma geral é uma especialidade médica investigativa e atua como parte do processo diagnóstico das doenças.",
                            nome_especialidade = "Patologia Clínica/Medicina laboratorial"
                        },
                        new
                        {
                            id = 48,
                            descricao_especialidade = "é a parte da medicina que estuda e trata crianças.",
                            nome_especialidade = "Pediatria"
                        },
                        new
                        {
                            id = 49,
                            descricao_especialidade = "é a parte da medicina que estuda e trata o sistema respiratório.",
                            nome_especialidade = "Pneumologia"
                        },
                        new
                        {
                            id = 50,
                            descricao_especialidade = "é a parte da medicina que previne e trata ao transtornos mentais e comportamentais.",
                            nome_especialidade = "Psiquiatria"
                        },
                        new
                        {
                            id = 52,
                            descricao_especialidade = "tratamento empregado em doenças várias, com o uso de raio X ou outra forma de energia radiante.",
                            nome_especialidade = "Radioterapia"
                        },
                        new
                        {
                            id = 53,
                            descricao_especialidade = "é a especialidade médica que trata das doenças do tecido conjuntivo, articulações e doenças autoimunes. Diferente do senso comum o reumatologista não trata somente reumatismo.",
                            nome_especialidade = "Reumatologia"
                        },
                        new
                        {
                            id = 54,
                            descricao_especialidade = "é a parte da medicina que estuda e trata cirurgicamente e clinicamente os problemas do sistema urinário e do sistema reprodutor masculino e feminino.",
                            nome_especialidade = "Urologia"
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.habilidade", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descricao_habilidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nome_habilidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("habilidade");

                    b.HasData(
                        new
                        {
                            id = 1,
                            descricao_habilidade = "Médico consegue se comunicar em Libras",
                            nome_habilidade = "Comunicação em Libras"
                        },
                        new
                        {
                            id = 2,
                            descricao_habilidade = "Médico disponibiliza materiais (Exemplo: receitas, prontuários) em Braille",
                            nome_habilidade = "Materiais em Braille"
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.horarios_atendimento_acompanhante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("hr_fim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("hr_inicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_agenda_acompanhante")
                        .HasColumnType("int");

                    b.Property<int>("id_dia_semana")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_agenda_acompanhante");

                    b.HasIndex("id_dia_semana");

                    b.ToTable("horarios_atendimento_acompanhante");

                    b.HasData(
                        new
                        {
                            id = 1,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 1,
                            id_dia_semana = 1
                        },
                        new
                        {
                            id = 2,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 1,
                            id_dia_semana = 2
                        },
                        new
                        {
                            id = 3,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 1,
                            id_dia_semana = 3
                        },
                        new
                        {
                            id = 4,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 1,
                            id_dia_semana = 4
                        },
                        new
                        {
                            id = 5,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 1,
                            id_dia_semana = 5
                        },
                        new
                        {
                            id = 6,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 1,
                            id_dia_semana = 6
                        },
                        new
                        {
                            id = 7,
                            hr_fim = new DateTime(2020, 6, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 2,
                            id_dia_semana = 2
                        },
                        new
                        {
                            id = 8,
                            hr_fim = new DateTime(2020, 6, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 2,
                            id_dia_semana = 3
                        },
                        new
                        {
                            id = 9,
                            hr_fim = new DateTime(2020, 6, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 2,
                            id_dia_semana = 4
                        },
                        new
                        {
                            id = 10,
                            hr_fim = new DateTime(2020, 6, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 2,
                            id_dia_semana = 5
                        },
                        new
                        {
                            id = 11,
                            hr_fim = new DateTime(2020, 6, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 2,
                            id_dia_semana = 6
                        },
                        new
                        {
                            id = 12,
                            hr_fim = new DateTime(2020, 6, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_acompanhante = 2,
                            id_dia_semana = 1
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.horarios_atendimento_medico", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("hr_fim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("hr_inicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_agenda_medico")
                        .HasColumnType("int");

                    b.Property<int>("id_dia_semana")
                        .HasColumnType("int");

                    b.Property<int>("id_local_atendimento")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id_agenda_medico");

                    b.HasIndex("id_dia_semana");

                    b.HasIndex("id_local_atendimento");

                    b.ToTable("horarios_atendimento_medico");

                    b.HasData(
                        new
                        {
                            id = 1,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 1,
                            id_dia_semana = 2,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 2,
                            hr_fim = new DateTime(2020, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 1,
                            id_dia_semana = 2,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 3,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 1,
                            id_dia_semana = 4,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 4,
                            hr_fim = new DateTime(2020, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 1,
                            id_dia_semana = 4,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 5,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 2,
                            id_dia_semana = 2,
                            id_local_atendimento = 5
                        },
                        new
                        {
                            id = 6,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 2,
                            id_dia_semana = 4,
                            id_local_atendimento = 5
                        },
                        new
                        {
                            id = 7,
                            hr_fim = new DateTime(2020, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 3,
                            id_dia_semana = 2,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 8,
                            hr_fim = new DateTime(2020, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 3,
                            id_dia_semana = 4,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 9,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 4,
                            id_dia_semana = 2,
                            id_local_atendimento = 2
                        },
                        new
                        {
                            id = 10,
                            hr_fim = new DateTime(2020, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 4,
                            id_dia_semana = 2,
                            id_local_atendimento = 2
                        },
                        new
                        {
                            id = 11,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 5,
                            id_dia_semana = 3,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 12,
                            hr_fim = new DateTime(2020, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 5,
                            id_dia_semana = 6,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 13,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 6,
                            id_dia_semana = 3,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 14,
                            hr_fim = new DateTime(2020, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 6,
                            id_dia_semana = 6,
                            id_local_atendimento = 1
                        },
                        new
                        {
                            id = 15,
                            hr_fim = new DateTime(2020, 6, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 7,
                            id_dia_semana = 3,
                            id_local_atendimento = 5
                        },
                        new
                        {
                            id = 16,
                            hr_fim = new DateTime(2020, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            hr_inicio = new DateTime(2020, 6, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            id_agenda_medico = 7,
                            id_dia_semana = 6,
                            id_local_atendimento = 5
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.local_atendimento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bairro_local_atendimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cep_local_atendimento")
                        .HasColumnType("int");

                    b.Property<string>("complemento_local_atendimento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("contato_local_atendimento_1")
                        .HasColumnType("int");

                    b.Property<int>("contato_local_atendimento_2")
                        .HasColumnType("int");

                    b.Property<string>("endereco_local_atendimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("municipio_local_atendimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nome_local_atendimento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numero_local_atendimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uf_local_atendimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("local_atendimento");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bairro_local_atendimento = "Pinheiros",
                            cep_local_atendimento = 5403900,
                            contato_local_atendimento_1 = 1126610000,
                            contato_local_atendimento_2 = 0,
                            endereco_local_atendimento = "Avenida Doutor Enéas Carvalho de Aguiar",
                            municipio_local_atendimento = "São Paulo",
                            nome_local_atendimento = "Hospital das Clínicas",
                            numero_local_atendimento = "255",
                            uf_local_atendimento = "SP"
                        },
                        new
                        {
                            id = 2,
                            bairro_local_atendimento = "Cerqueira César",
                            cep_local_atendimento = 5403901,
                            contato_local_atendimento_1 = 1126618500,
                            contato_local_atendimento_2 = 0,
                            endereco_local_atendimento = "Avenida Doutor Enéas Carvalho de Aguiar",
                            municipio_local_atendimento = "São Paulo",
                            nome_local_atendimento = "Instituto da Criança",
                            numero_local_atendimento = "647",
                            uf_local_atendimento = "SP"
                        },
                        new
                        {
                            id = 3,
                            bairro_local_atendimento = "Cerqueira César",
                            cep_local_atendimento = 5403902,
                            contato_local_atendimento_1 = 1126610000,
                            contato_local_atendimento_2 = 0,
                            endereco_local_atendimento = "Rua Doutor Ovídio Pires de Campos",
                            municipio_local_atendimento = "São Paulo",
                            nome_local_atendimento = "Instituto de Ortopedia e Traumatologia",
                            numero_local_atendimento = "333",
                            uf_local_atendimento = "SP"
                        },
                        new
                        {
                            id = 4,
                            bairro_local_atendimento = "Cerqueira César",
                            cep_local_atendimento = 5403903,
                            contato_local_atendimento_1 = 1126610000,
                            contato_local_atendimento_2 = 0,
                            endereco_local_atendimento = "Rua Doutor Ovídio Pires de Campos",
                            municipio_local_atendimento = "São Paulo",
                            nome_local_atendimento = "Instituto de Psiquiatria",
                            numero_local_atendimento = "s/n",
                            uf_local_atendimento = "SP"
                        },
                        new
                        {
                            id = 5,
                            bairro_local_atendimento = "Cerqueira César",
                            cep_local_atendimento = 5403904,
                            contato_local_atendimento_1 = 1126615000,
                            contato_local_atendimento_2 = 0,
                            endereco_local_atendimento = "Avenida Doutor Enéas Carvalho de Aguiar",
                            municipio_local_atendimento = "São Paulo",
                            nome_local_atendimento = "Instituto do Coração",
                            numero_local_atendimento = "44",
                            uf_local_atendimento = "SP"
                        },
                        new
                        {
                            id = 6,
                            bairro_local_atendimento = "Cerqueira César",
                            cep_local_atendimento = 5403906,
                            contato_local_atendimento_1 = 1130617524,
                            contato_local_atendimento_2 = 0,
                            endereco_local_atendimento = "Avenida Doutor Enéas Carvalho de Aguiar",
                            municipio_local_atendimento = "São Paulo",
                            nome_local_atendimento = "Escola de Enfermagem",
                            numero_local_atendimento = "419",
                            uf_local_atendimento = "SP"
                        },
                        new
                        {
                            id = 7,
                            bairro_local_atendimento = "Cerqueira César",
                            cep_local_atendimento = 5403907,
                            contato_local_atendimento_1 = 1130617011,
                            contato_local_atendimento_2 = 0,
                            endereco_local_atendimento = "Avenida Doutor Enéas Carvalho de Aguiar",
                            municipio_local_atendimento = "São Paulo",
                            nome_local_atendimento = "Instituto de Medicina Tropical",
                            numero_local_atendimento = "470",
                            uf_local_atendimento = "SP"
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.medico", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("crm_medico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email_medico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("id_agenda_medico")
                        .HasColumnType("int");

                    b.Property<int?>("id_local_atendimento_medico")
                        .HasColumnType("int");

                    b.Property<string>("nome_medico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("numero_contato_medico_1")
                        .HasColumnType("bigint");

                    b.Property<long>("numero_contato_medico_2")
                        .HasColumnType("bigint");

                    b.Property<int>("possui_agenda_medico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.HasKey("id");

                    b.HasIndex("id_local_atendimento_medico");

                    b.ToTable("medico");

                    b.HasData(
                        new
                        {
                            id = 1,
                            crm_medico = "397068/SP",
                            email_medico = "Maecenas.libero@nonluctussit.edu",
                            nome_medico = "Hermione E. Walton",
                            numero_contato_medico_1 = 11937913626L,
                            numero_contato_medico_2 = 11977127427L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 2,
                            crm_medico = "536868/SP",
                            email_medico = "odio.Nam.interdum@sed.co.uk",
                            nome_medico = "Ciara U. French",
                            numero_contato_medico_1 = 11959061463L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 3,
                            crm_medico = "366710/SP",
                            email_medico = "mauris.erat.eget@necquam.com",
                            nome_medico = "Cain D. Pace",
                            numero_contato_medico_1 = 11996322431L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 4,
                            crm_medico = "333157/SP",
                            email_medico = "dapibus@Integermollis.org",
                            nome_medico = "Dane V. Patrick",
                            numero_contato_medico_1 = 11950954428L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 5,
                            crm_medico = "712719/SP",
                            email_medico = "dui.semper@indolor.net",
                            nome_medico = "Jasmine G. Lane",
                            numero_contato_medico_1 = 11964839316L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 6,
                            crm_medico = "420534/SP",
                            email_medico = "euismod.mauris@aliquetsemut.edu",
                            nome_medico = "Brenden G. Mercer",
                            numero_contato_medico_1 = 11907101308L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 7,
                            crm_medico = "294301/SP",
                            email_medico = "Quisque.purus.sapien@etpede.edu",
                            nome_medico = "Kiara Y. Vincent",
                            numero_contato_medico_1 = 11925917790L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 8,
                            crm_medico = "900552/SP",
                            email_medico = "Nulla@pedeblandit.ca",
                            nome_medico = "Vivien Q. Montgomery",
                            numero_contato_medico_1 = 11942813982L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 9,
                            crm_medico = "703417/SP",
                            email_medico = "non@amagnaLorem.ca",
                            nome_medico = "Jasmine E. Velasquez",
                            numero_contato_medico_1 = 11976712362L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 10,
                            crm_medico = "290338/SP",
                            email_medico = "neque.In@fringilla.co.uk",
                            nome_medico = "Casey H. Sandoval",
                            numero_contato_medico_1 = 11927536612L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 11,
                            crm_medico = "274007/SP",
                            email_medico = "Curabitur.massa@Etiamvestibulum.com",
                            nome_medico = "Stacy H. Mann",
                            numero_contato_medico_1 = 11906637286L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 12,
                            crm_medico = "631183/SP",
                            email_medico = "fermentum@tempor.org",
                            nome_medico = "Kirestin R. Lawson",
                            numero_contato_medico_1 = 11927212735L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 13,
                            crm_medico = "187420/SP",
                            email_medico = "Phasellus.in@mifringillami.co.uk",
                            nome_medico = "Mira K. Bonner",
                            numero_contato_medico_1 = 11924044637L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 14,
                            crm_medico = "643205/SP",
                            email_medico = "commodo.auctor.velit@necmollisvitae.net",
                            nome_medico = "Quentin Y. Atkins",
                            numero_contato_medico_1 = 11931199344L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 15,
                            crm_medico = "078833/SP",
                            email_medico = "pede.blandit@Phasellus.co.uk",
                            nome_medico = "Ginger U. Merritt",
                            numero_contato_medico_1 = 1195490966L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 16,
                            crm_medico = "179148/SP",
                            email_medico = "convallis@dictummi.ca",
                            nome_medico = "Thomas Y. Pugh",
                            numero_contato_medico_1 = 11989343356L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 17,
                            crm_medico = "140887/SP",
                            email_medico = "purus.Duis.elementum@lacusvarius.edu",
                            nome_medico = "Hammett Y. Craft",
                            numero_contato_medico_1 = 11947701257L,
                            numero_contato_medico_2 = 0L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 18,
                            crm_medico = "383170/SP",
                            email_medico = "tristique@Aliquamfringilla.com",
                            nome_medico = "Skyler U. Tillman",
                            numero_contato_medico_1 = 11939297876L,
                            numero_contato_medico_2 = 11968465452L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 19,
                            crm_medico = "749873/SP",
                            email_medico = "purus.sapien.gravida@risusQuisquelibero.edu",
                            nome_medico = "Leroy U. Hartman",
                            numero_contato_medico_1 = 11975459127L,
                            numero_contato_medico_2 = 11974407415L,
                            possui_agenda_medico = 0
                        },
                        new
                        {
                            id = 20,
                            crm_medico = "666209/SP",
                            email_medico = "sagittis.lobortis@tellus.com",
                            nome_medico = "Alfreda O. Rivas",
                            numero_contato_medico_1 = 11969468105L,
                            numero_contato_medico_2 = 11956837931L,
                            possui_agenda_medico = 0
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.paciente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bairro_endereco_paciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("celular_paciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cep_endereco_paciente")
                        .HasColumnType("int");

                    b.Property<string>("complemento_endereco_paciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("documento_paciente")
                        .HasColumnType("bigint");

                    b.Property<string>("email_paciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("endereco_paciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id_acesso_paciente")
                        .HasColumnType("int");

                    b.Property<string>("municipio_endereco_paciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nome_paciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numero_endereco_paciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uf_endereco_paciente")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("paciente");

                    b.HasData(
                        new
                        {
                            id = 1,
                            bairro_endereco_paciente = "Pinheiros",
                            celular_paciente = "11984571122",
                            cep_endereco_paciente = 5403900,
                            documento_paciente = 12454125477L,
                            email_paciente = "paciente@gmail.com",
                            endereco_paciente = "Avenida Doutor Enéas Carvalho de Aguiar",
                            id_acesso_paciente = 1,
                            municipio_endereco_paciente = "São Paulo",
                            nome_paciente = "Paciente Hacka",
                            numero_endereco_paciente = "300",
                            uf_endereco_paciente = "SP"
                        });
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.Relationship.acompanhante_local_atendimento", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.acompanhante", "acompanhante")
                        .WithMany()
                        .HasForeignKey("acompanhanteid");

                    b.HasOne("HackatonPWGS.Models.Entity.local_atendimento", "local_atendimento")
                        .WithMany()
                        .HasForeignKey("local_atendimentoid");
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.Relationship.medico_clinica", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.clinica", "clinica")
                        .WithMany("medicos_clinica")
                        .HasForeignKey("id_clinica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackatonPWGS.Models.Entity.medico", "medico")
                        .WithMany("clinica_medico")
                        .HasForeignKey("id_medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.Relationship.medico_especialidade", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.especialidade_medica", "especialidade")
                        .WithMany("medico_especialidade")
                        .HasForeignKey("id_especialidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackatonPWGS.Models.Entity.medico", "medico")
                        .WithMany("especialidade_medico")
                        .HasForeignKey("id_medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.Relationship.medico_habilidade", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.habilidade", "habilidade")
                        .WithMany("medicos_habilidade")
                        .HasForeignKey("id_habilidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackatonPWGS.Models.Entity.medico", "medico")
                        .WithMany("habilidade_medico")
                        .HasForeignKey("id_medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.agenda_acompanhante", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.acompanhante", "acompanhante")
                        .WithOne("agenda_acompanhante")
                        .HasForeignKey("HackatonPWGS.Models.Entity.agenda_acompanhante", "id_acompanhante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.agenda_medico", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.medico", "medico")
                        .WithOne("agenda_medico")
                        .HasForeignKey("HackatonPWGS.Models.Entity.agenda_medico", "id_medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.agendamento_acompanhante", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.agenda_acompanhante", "agenda_acompanhante")
                        .WithMany("agendamentos")
                        .HasForeignKey("id_agenda_acompanhante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackatonPWGS.Models.Entity.paciente", "paciente")
                        .WithMany("agendamentos_acompanhantes")
                        .HasForeignKey("id_paciente");
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.agendamento_medico", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.agenda_medico", "agenda_medico")
                        .WithMany("agendamentos")
                        .HasForeignKey("id_agenda_medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackatonPWGS.Models.Entity.paciente", "paciente")
                        .WithMany("agendamentos")
                        .HasForeignKey("id_paciente");
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.clinica", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.local_atendimento", "local_atendimento_clinica")
                        .WithMany()
                        .HasForeignKey("id_local_atendimento_clinica");
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.horarios_atendimento_acompanhante", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.agenda_acompanhante", "agenda")
                        .WithMany("horarios_atendimento")
                        .HasForeignKey("id_agenda_acompanhante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackatonPWGS.Models.Entity.dia_semana", "dia_semana")
                        .WithMany()
                        .HasForeignKey("id_dia_semana")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.horarios_atendimento_medico", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.agenda_medico", "agenda")
                        .WithMany("horarios_atendimento")
                        .HasForeignKey("id_agenda_medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackatonPWGS.Models.Entity.dia_semana", "dia_semana")
                        .WithMany()
                        .HasForeignKey("id_dia_semana")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackatonPWGS.Models.Entity.local_atendimento", "local_atendimento_agendamento")
                        .WithMany()
                        .HasForeignKey("id_local_atendimento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HackatonPWGS.Models.Entity.medico", b =>
                {
                    b.HasOne("HackatonPWGS.Models.Entity.local_atendimento", "local_atendimento_medico")
                        .WithMany("medicos")
                        .HasForeignKey("id_local_atendimento_medico");
                });
#pragma warning restore 612, 618
        }
    }
}
